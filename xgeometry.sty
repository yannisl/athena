\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{xgeometry}[2012/02/13 v1.0 sample texts]
%    \begin{macro}
%    This macro is a helper macro to set the paper height and width
%    we also save the paper name in its own macro.
%    \begin{macrocode}
\gdef\setpapersize@cx#1#2#3{%
   \gdef\papername{#1}
   \setlength\paperheight{#2}
   \setlength\paperwidth{#3}
   % headheight is common to all so we set it here
   \setlength\headheight{12\p@}
  % if pdf we need to set the pageheight and pagewidth
   \global\pdfpageheight=#2
   \global\pdfpagewidth=#3
   \setlength\textwidth{0.7\pdfpagewidth}
   \setlength\textheight{0.8\pdfpageheight}
}
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}
%    we cater for three sizes at present and replicate the code from the .clo files, maybe part
%    of it is unecessary.
%
%    \begin{macrocode}
\def\setparams@cx#1#2#3{%
    \def\X{#3}\def\XX{11pt}
    % 11pt font set it as well
    \ifx\X\XX
          \@setfontsize\normalsize\@xipt{13.2}\selectfont%
          \abovedisplayskip 13.2\p@ \@plus 3\p@ \@minus 3\p@
          \abovedisplayshortskip \z@ \@plus 3\p@
           \belowdisplayshortskip 6.6\p@ \@plus 3\p@ \@minus 3\p@
    \else
       \def\XX{12pt}
        \ifx\X\XX
           \@setfontsize\normalsize\@xiipt\@xivpt\selectfont
           \abovedisplayskip 14.4\p@ \@plus 3\p@ \@minus 3\p@
           \abovedisplayshortskip \z@ \@plus 3\p@
          \belowdisplayshortskip 7.2\p@ \@plus 3\p@ \@minus 3\p@
       \fi
    \fi
    \setlength\headsep{#3}
    \setlength\footskip{#2}
    \setlength\topskip{#3}
    \setlength\maxdepth{0.5\topskip} % need to check
 }
%    \end{macrocode}
%    \end{macro}
%
\cxset{
         10pt/.code=\setparams@cx{6pt}{25pt}{10pt},
         11pt/.code=\setparams@cx{7pt}{27.5pt}{11pt},
         12pt/.code=\setparams@cx{8pt}{30pt}{12pt} \@setfontsize\normalsize\@xiipt\@xivpt\selectfont,
}%
%    We now set keys for all the paper sizes
\cxset{
        a4paper/.code=\setpapersize@cx{a4paper}{297mm}{210mm},
        a5paper/.code=\setpapersize@cx{a5paper}{210mm}{148mm},
        a6paper/.code=\setpapersize@cx{a6paper}{105mm}{148},
        b5paper/.code=\setpapersize@cx{b5paper}{250mm}{176mm},
        letterpaper/.code=\setpapersize@cx{letterpaper}{11n}{8.5in},
        legalpaper/.code=\setpapersize@cx{legalpaper}{14in}{8.5in},
        executivepaper/.code=\setpapersize@cx{executivepaper}{10.5in}{7.25in},
        usledger/.code=\setpaper@cx{usledger}{11in}{17in} 
}
%    the classical dimesions were obtained from the Octavo class
%    we use mm or in depending on the type of paper standard
\cxset{foolscap/.code=\setpapersize@cx{foolscap}{171mm}{108mm},
          crown/.code=\setpapersize@cx{crown}{191mm}{127mm},
          post/.code=\setpapersize@cx{post}{194mm}{122mm},
          large post/.code=\setpapersize@cx{large post}{210mm}{137mm},
          demy/.code=\setpapersize@cx{demy}{222mm}{143mm},
          medium/.code=\setpapersize@cx{medium}{229mm}{146mm},
          royal/.code =  \setpapersize@cx{royal}{254mm}{159mm},
          superroyal/.code=\setpapersize@cx{superroyal}{267mm}{171mm},
          imperial/.code=  \setpapersize@cx{imperial}{279mm}{191mm}}
%   Lulu paper sizes
%   http://wepod.wordpress.com/lulu-specs/
%Manuscript Templates
%6″ x 9″  US TRADE
%(15.24cm x 22.86cm)
%8.5″ x 11″
%(21.59cm x 27.94cm)
%Comic, 6.625″ x 10.25″
%(16.827cm x 26.03cm)
%Landscape, 9″ x 7″
%(22.86cm x 17.78cm)
%Square, 7.5″ x 7.5″
%(19.05cm x 19.05cm)
%Pocket Size, 4.25″ x 6.875″
%(10.8cm x 17.46cm)
%Royal, 15.6cm x 23.4cm
%(6.14″ x 9.21″)
%Crown Quarto, 18.9cm x 24.6cm
%(7.44″ x 9.68″)
%A4, 21.0cm x 29.7cm
%(8.27″ x 11.69″)
%   Set the parameters that depend on font-sizes
\cxset{
        lulu pocketbook/.code=\setpapersize@cx{lulu pocket book}{6.87in}{4.25in},
        lulu digest/.code=\setpapersize@cx{lulu digest}{8.5in}{5.5in},
        lulu us trade/.code=\setpapersize@cx{lulu us trade}{9in}{6in},%octavo
        lulu royal/.code=\setpapersize@cx{lulu royal}{9.21in}{6.13in},
        lulu comic/.code=\setpapersize@cx{lulu comic}{10.25in}{6.625in},
        lulu crown quarto/.code=\setpapersize@cx{lulu crown quarto}{9.68in}{7.44in},
        lulu small square/.code=\setpapersize@cx{lulu small}{7.5in}{7.5in},
        lulu square/.code=\setpapersize@cx{lulu large}{8.5in}{8.5in},
        lulu landscape/.code=\setpapersize@cx{lulu landscape}{7in}{9in},
 %lulu large landscape/.code=\setpapersize@cx{lulu large landscape}{}{},
}



%   we need to set a default size before we determine the
%   rest of the parameters.
 \cxset{lulu square,10pt}


% does not seem to work
%\@setfontsize\normalsize\@xiipt\@xivpt\normalsize

%    set a default top margin first. This appears arbitrary and is from book.cls
\def\topmarginauto{%
\setlength{\topmargin}{0.1\paperheight}
    \addtolength{\topmargin}{-\headheight}
    \addtolength{\topmargin}{-\headsep}
    \addtolength{\topmargin}{-1in}
}


% AMS STRATEGY TO CENTER TEXTHEIGHT
% the textheight is fixed based on paper 54.5pc for a4 paper and 50.5pc for letterpaper
% the textheight is then centered by adjusting the topmargin factor and allowing for the
% driver margin the (1inch)
\cxset{textheight fixed/.code=\global\setlength\textheight#1}
\iffalse
% to add code
\fi


%   Allow keys to change it.
\cxset{topmargin/.code=\setlength{\topmargin}{#1}}
\cxset{topmargin latex/.code=\topmarginauto}
\cxset{topmargin latex}

%   \section{Calculation of textwidth}
%    The calculation of textwidth will depend on the strategy employed to calculate it.
% \begin{macro}{\textwidth}
%    Define the width of the text block to 0.7 of the page width, and make
%    calculations a little easier by adjusting the calculated width to a
%    whole number of points.
%    \begin{macrocode}
       \newif\if@octavo
       \@octavofalse
\if@octavo
\setlength{\textwidth}{0.7\paperwidth}
    \@settopoint\textwidth
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\textheight}
%    The height of the text block itself is set to 0.7 times the page height.
%    This amount is then adjusted to ensure that a whole number of lines makes
%    up the text block, and does so exactly.
%    \begin{macrocode}
\setlength\@tempdima{0.7\paperheight}
%    \end{macrocode}
%    take away the first line, which is a bit shorter than the |\baselineskip|,
%    \begin{macrocode}
    \addtolength\@tempdima{-\topskip}
%    \end{macrocode}
%    this length may be very close, but just a little too small to accommodate
%    one more line, so we add a small amount,
%    \begin{macrocode}
    \addtolength\@tempdima{5\p@}
%    \end{macrocode}
%    and calculate the number of lines in this length,
%    \begin{macrocode}
    \divide\@tempdima\baselineskip
    \@tempcnta=\@tempdima
%    \end{macrocode}
%    The correct textheight comes to the number of lines just calculated,
%    multiplied by the height of text lines, |\baselineskip|, and with the
%    addition of the |\topskip| we took away initially.
%    \begin{macrocode}
    \setlength\textheight{\@tempcnta\baselineskip}
    \addtolength\textheight{\topskip}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Margin dimensions}
%     Now that we have set the size of the text block, the amount of space
%     available for margins is set as well. The remaining white space is divided
%     in a 1:2 ratio, hence the proportions between margins and text become 1:7:2.
%
% \begin{macro}{\evensidemargin}
% \begin{macro}{\oddsidemargin}
%    Since we are typesetting books, both even and odd side margins have to be
%    set.
%    \begin{macrocode}
\setlength{\evensidemargin}{0.2\paperwidth}
\addtolength{\evensidemargin}{-1in}
\setlength{\oddsidemargin}{0.1\paperwidth}
\addtolength{\oddsidemargin}{-1in}
%    \end{macrocode}

\fi
%% end of octavo algorithm and calculations

%    Define an innermargin to enable easy drawing of parameters
\newlength\innermargin
\newlength\lefttrim
\newlength\bottomtrim

%    The stockheight and stockwidth are used when the paper is to be trimmed
%    they default to the dimensions for paper width and paper height
\@ifundefined{stockheight}{\global\newlength\stockheight}{}
\@ifundefined{stockwidth}{\global\newlength\stockwidth}{}
\ifdim\stockheight=0pt\addtolength\stockheight{\paperheight}\fi
   \addtolength\stockheight{0mm}
%
\ifdim\stockwidth=0pt\addtolength\stockwidth{\paperwidth}\fi
   \addtolength\stockwidth{0mm}
%
%   We set all the trims to zero to start with.
\setlength\lefttrim{0mm}
\setlength\bottomtrim{0.125in}
\setlength\trimtop{0.125in}
\setlength\trimedge{0.125in}
%
%

% This macro has been adapted from the layouts package, it sets the units to be printed
% in the diagrams.
\newcommand{\printinunitsof@cx}[1]{%
  \def\l@yunitperpt{1.0}\def\l@yunits{pt}%
  \def\l@yta{#1}\def\l@ytb{pt}%
  \ifx \l@yta\l@ytb
    \def\l@yunitperpt{1.0}\def\l@yunits{pt}%
  \else
    \def\l@ytb{pc}%
    \ifx \l@yta\l@ytb
      \def\l@yunitperpt{0.083333}\def\l@yunits{pc}%
    \else
      \def\l@ytb{in}%
      \ifx \l@yta\l@ytb
        \def\l@yunitperpt{0.013837}\def\l@yunits{in}%
      \else
        \def\l@ytb{mm}%
        \ifx \l@yta\l@ytb
          \def\l@yunitperpt{0.351459}\def\l@yunits{mm}%
        \else
          \def\l@ytb{cm}%
          \ifx \l@yta\l@ytb
            \def\l@yunitperpt{0.0351459}\def\l@yunits{cm}%
          \else
            \def\l@ytb{bp}%
            \ifx \l@yta\l@ytb
              \def\l@yunitperpt{0.996264}\def\l@yunits{bp}%
            \else
              \def\l@ytb{dd}%
              \ifx \l@yta\l@ytb
                \def\l@yunitperpt{0.9345718}\def\l@yunits{dd}%
              \else
                \def\l@ytb{cc}%
                \ifx \l@yta\l@ytb
                  \def\l@yunitperpt{0.0778809}\def\l@yunits{cc}%
%                \else
%                  \def\l@ytb{PT}%
%                  \ifx \l@yta\l@ytb
%                    \def\l@yunitperpt{1.0}\def\l@yunits{PT}% gives problems with pgfmathparse
%                  \fi
                \fi
              \fi
            \fi
          \fi
        \fi
      \fi
    \fi
  \fi
}

% Define keys to set it
\cxset{geometry units/.code=\printinunitsof@cx{#1}}
\cxset{geometry units=pt}

% #1 value in pts
% default in mm sorry USA.
% rounding in 1 decimal place
\def\convert@cx#1{%
   \pgfmathparse{#1*\l@yunitperpt}
   % use pgfmath for rounding to 2 decimals
   \pgfmathprintnumber{\pgfmathresult}\thinspace\l@yunits
}

% Layout related macros to go to separate style file
\def\aspectratio{\pgfmathparse{\paperheight/\paperwidth} \pgfmathresult}


% Set to true to draw an oddside page. Initially set to false.
\newcommand\layoutscale@cx{0.4}

\newif\ifoddpagelayout@cx
   \oddpagelayout@cxtrue

% Set true to draw marginpars on a page
\newif\ifdrawmarginpars
   \drawmarginparstrue

% This draws a two page spread
\newlength\bindingcorrection
\newlength\oneninth
\newlength\sixninths
\setlength\oneninth{\dimexpr(\paperwidth/9)}
\setlength\sixninths{\dimexpr(\paperwidth*6/9)}
\let\trytextwidth\sixninths


\newcommand{\alphabet}{\normalfont\selectfont\raggedleft abcdefghijklmnopqrstuvwxyz}%82



\newcommand\charactersperline{%
  \settowidth{\@tempdima}{\alphabet}
  \pgfmathparse{\textwidth/\@tempdima*26}
 \pgfmathprintnumber{\pgfmathresult}
}

\newcommand\alphabetsperline{
  \settowidth{\@tempdima}{\alphabet}
  \pgfmathparse{\textwidth/\@tempdima}
  \pgfmathresult
}

\newlength\alphlength
\newcommand\alphabetlength{%
  \settowidth{\alphlength}{\alphabet}
  \pgfmathparse{\alphlength}
  \pgfmathprintnumber{\pgfmathresult}pt
}

% We need to use the fp package to calculate the ratios, as PGF has problems with large
% dimensions or I am making an error
\newcommand\textarearatio{%
    \FPmul{\result}{\strip@pt\textwidth}{\strip@pt\textheight}
    \FPmul{\resulti}{\strip@pt\paperwidth}{\strip@pt\paperheight}
    \FPdiv{\resultii}{\result}{\resulti}
    \pgfmathprintnumber{\resultii}
}

% Calculate the ratio textheight/paperheight
\newcommand\textheightratio{%
    \FPdiv{\result}{\strip@pt\textheight}{\strip@pt\paperheight}
    \FPround{\result}{\result}{2}
    \result
}

% Calculate textheight/paperwidth

\newcommand\textheighttopaperwidth{%
    \pgfmathparse{\textheight/\paperwidth}
    \pgfkeys{/pgf/number format/.cd,fixed,precision=2}
    \pgfmathprintnumber{\pgfmathresult}
}

\newlength\margintop

\newcommand\thetop{%
   \pgfmathparse{1in+\topmargin+\headheight+\headsep}
   \pgfmathsetlength{\margintop}{\pgfmathresult}
}

\thetop

\newlength\marginbottom
\newcommand\thebottom{%
   \pgfmathparse{\stockheight-(1in+\topmargin+\headheight+\headsep+\textheight)}
    \pgfmathsetlength{\marginbottom}{\pgfmathresult}
  }
\thebottom

\newcommand\verticalmarginratio{%
\pgfmathparse{(\paperheight-(1in+\topmargin+\headheight+\headsep+\textheight))/  (\paperheight-(1in+\topmargin+\headheight+\headsep+\textheight))}
\pgfmathresult
}

\newcommand\horizontalmarginratio{%
\pgfmathparse{(\paperwidth-\textwidth-\oddsidemargin)/(1in+\oddsidemargin)}
\pgfmathresult
}

\newcommand\numbertextlines{%
% baselineskip to be corrected
   \pgfmathparse{(\textheight-\topskip)/(12)-1}\pgfmathresult
}

\cxset{geometry units=mm}

\def\printgeometryvalues{%
   \noindent
   \begin{tabular}{ll}
   paper name & \papername\\
   stock height & \convert@cx{\stockheight}\\
   stock width  & \convert@cx{\stockwidth}\\
   paperwidth & \convert@cx{\paperwidth}\\
   paperheight & \convert@cx{\paperheight}\\
   voffset & \convert@cx{\voffset}\\
   hoffset & \convert@cx{\hoffset}\\
   thetextheight & \convert@cx{\textheight}\\
   thetextwidth  & \convert@cx{\textwidth}\\
   Top margin   &  \thetop\convert@cx{\the\margintop}\\  % need to correct
   Bottom margin & \thebottom\\
   thetopmargin & \convert@cx{\topmargin}\\
   theheadheight & \convert@cx{\headheight}\\
   theheadsep & \convert@cx{\headsep}\\
   theoddsidemargin & \convert@cx{\oddsidemargin}\\
   theevensidemargin & \convert@cx{\evensidemargin}\\
   themarginparsep& \convert@cx{\marginparsep}\\
   themarginparwidth& \convert@cx{\marginparwidth}\\
   themarginpush& \convert@cx{\marginparpush}\\
   thevoffset& \convert@cx{\voffset}\\
   thefootskip& \convert@cx{\footskip}\\
   aspect ratio \aspectratio\\
   twoside&  \if@twoside true\else false\fi\\
   reversemarginpar& \if@mparswitch true \else false\fi\\
  \end{tabular}
 }

\def\readability{%
\begin{tabular}{lr}
  Characters per line &\charactersperline\\
  Alphabets per line &\alphabetsperline\\
  Alphabet length &\alphabetlength\\
  Baselineskip & \the\baselineskip\\
  Number of text lines &\numbertextlines\\
  Text area ratio &\textarearatio\\
  textheight/paperwidth&\textheighttopaperwidth\\
  Text/page height ratio & \textheightratio\\
  Vertical margin ratio &\verticalmarginratio\\
  Horizontal margin ratio &1:\horizontalmarginratio\\
\end{tabular}}


% Note with new geometry paper has to be defined in preamble
% I do not feel very confident of this
% Don't understand it fully how is working
 %\@twosidefalse \@mparswitchfalse % one side option
%\cxset{geometry oxford/.code={
%\newgeometry{left=74.8mm,top=27.4mm,headsep=2\baselineskip,%
%marginparsep=8.2mm,marginparwidth=49.4mm,textheight=49\baselineskip,headheight=\baselineskip}
%\@twosidefalse \@mparswitchfalse % one side option
%\reversemarginpar
%}}
% \@mparswitchfalse
%\cxset{geometry textwidth/.store in=\textwidth@cx,
%          geometry textheight/.store in=\textheight@cx,
%          geometry tufte/.code={
%             \newgeometry{a4paper,left=24.8mm,top=27.4mm,headsep=2\baselineskip,%
%             textwidth=107mm,marginparsep=8.2mm,marginparwidth=49.4mm,%
%             textheight=\textheight@cx\baselineskip,headheight=\baselineskip}
%            \@twosidefalse \@mparswitchfalse % one side option
%           %\reversemarginpar
%    }
%}
%
%
%\cxset{marginpar push/.store in=\marginparpush@cx,
%          marginpar font/.store in=\marginparfont@cx,
%          marginpar justification/.is choice,
%          marginpar justification/justifying/.code=\gdef\marginparjustification@cx{\justifying},
%          marginpar justification/raggedright/.code=\gdef\marginparjustification@cx{\raggedright},
%          marginpar justification/RaggedRight/.code=\gdef\marginparjustification@cx{\RaggedRight},
%          marginpar justification/RaggedLeft/.code=\gdef\marginparjustification@cx{\RaggedLeft},
% }
%%\cxset{marginpar push=10pt,
%%          marginpar font=\normalfont\footnotesize\sffamily,
%%          marginpar justification=RaggedLeft}
%%
%%
%%\cxset{style13, geometry textheight=47,
%%          %geometry tufte,
%%          watermark text=SAMPLE TUFTE VARIANT,
%%          watermark text color=thered,
%%          header style=samplepage}
%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    DRAW THE PAGE ON A TRIAL BASIS
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\cxset{geometry units= mm}
% lots of keys for trial sizes. We default all sizes to the ones defined in
% by the document class.


% we need two keys to set trial stock height and stockwidth
\newlength\trystockheight@cx
\newlength\trystockwidth@cx
\cxset{try stockwidth/.code=\setlength\trystockwidth@cx{#1},
          try stockheight/.code=\setlength\trystockheight@cx{#1},
          try stock/.code=} % a4paper etc to be developed toninght

\cxset{try stockwidth=\paperwidth}
\cxset{try stockheight=\paperheight}

% We first set keys for the vertical dimensions
\newlength\trytextheight@cx
\newlength\tryheadheight@cx
\newlength\tryheadsep@cx
\newlength\tryfootskip@cx

\newlength\trymargintop@cx
\newlength\trymarginbottom@cx

% LaTeX uses a correction to adjust the top margin, which is called topmargin. It does not
% represent the top margin though which following geometry we denote as top. It could perhaps
% better be called top margin correction

\newlength\trytopmargin@cx

% Set keys for all the vertical dimensions and default to the current document settings
\cxset{try textheight/.code=\global\setlength\trytextheight@cx{#1},
          try textheight/.default=\textheight,
          try headheight/.code=\global\setlength\tryheadheight@cx{#1},
          try headheight/.default=\headheight,
          try headsep/.code=\global\setlength\tryheadsep@cx{#1},
          try headsep/.default=\headsep,
          try footskip/.code=\global\setlength\tryfootskip@cx{#1},
          try footskip/.default=\footskip,
          try topmargin/.code=\global\setlength\trytopmargin@cx{#1},
          try topmargin/.default=\topmargin,
}

% Set keys for all the trims, different people have different names for them. Normally two trims are
% specified the top trim and the edge trip. We define two others just in case and to make calculations
% easier if we have to use a different stock paper from the actual virtual paper width. the virtual
% paper is called the paperwidth and paperheight.

% We need to pick-up the memoir and koma allowances. TODO!
\newlength\trimtop@cx

\cxset{try trimtop/.code=\global\setlength\trimtop@cx{#1},
          try trimtop/.default=\global\setlength\trimtop{0pt},}

% set all the defaults

\cxset{try textheight,
          try headheight,
          try headsep,
          try footskip,
          try topmargin=0pt, % compensate for trim
          try trimtop=10pt}

\addtolength\trytopmargin@cx{0pt}

% set horizontal keys
\newlength\trytextwidth@cx
\setlength\trytextwidth@cx{0pt}
\newlength\trytrimedge@cx
\setlength\trytrimedge@cx{0pt}

\cxset{try textwidth/.code=\global\setlength{\trytextwidth@cx}{#1},
          try trimedge/.code=\global\setlength{\trytrimedge@cx}{#1},
}

\cxset{try textwidth=0.6\trystockwidth@cx,
          try trimedge=0.125in}

\def\alignedge{%
% removed parindent from here must add it at the image
  \checkoddpage%
%   \ifoddpage \global\setlength\innermargin{\oddsidemargin}
%          \else \global\setlength\innermargin{\evensidemargin}
%      \fi%
%   \if@twoside\setlength\innermargin{\dimexpr(\evensidemargin-\marginparsep)}%
%             \else\let\innermargin\oddsidemargin\fi
   \ifoddpage
      \innermargin\oddsidemargin
      \def\innermarginname{oddsidemargin}%
     \else
        \innermargin\evensidemargin
        \def\innermarginname{evensidemargin}%
  \fi
  }

\alignedge

\reversemarginparfalse

\newlength\trypaperwidth@cx
\newlength\trypaperheight@cx

% set the trial paper sizes as per trim sizes
\addtolength\trypaperwidth@cx{\trystockwidth@cx}
\addtolength\trypaperwidth@cx{-\trytrimedge@cx}

\addtolength\trypaperheight@cx{\trystockheight@cx}
\addtolength\trypaperheight@cx{-\trimtop@cx}
\addtolength\trypaperheight@cx{-\bottomtrim}

\addtolength\trymargintop@cx{1in}
\addtolength\trymargintop@cx{\dimexpr(\tryheadsep@cx+\tryheadheight@cx+\trytopmargin@cx)}

\setlength\trytextheight@cx{0.7\trystockheight@cx}

%\newlength\trymarginbottom@cx
\newcommand\trymarginbottom{%
   \pgfmathparse{\trystockheight@cx-(1in+\trytopmargin@cx+\tryheadheight@cx+\tryheadsep@cx+\trytextheight@cx)}
    \pgfmathsetlength{\trymarginbottom@cx}{\pgfmathresult}
  }
\trymarginbottom

\def\drawtriallayout{%
  \checkoddpage
   \alignedge

   \tikzset{dim/.style = {>= latex,color=DarkOrange}}
   \begin{tikzpicture}[scale=0.42,font={\scriptsize\rmfamily},line width=.8pt,
       every node={color=black},
       book trim/.style={color=NavyBlue,fill=white}]

\edef\tol{-2.5\baselineskip}

\def\drawpaperwidthdim{%
    \coordinate (A) at (0+\lefttrim,\tol);
    \coordinate (B) at (\trystockwidth@cx -\trytrimedge@cx,\tol);
    \coordinate (C) at (0.5\trystockwidth@cx,\tol);
    \draw[dim, |<->|] (A) -- (B);
   \node at (C) [yshift=0.5\baselineskip)]{paper width = \convert@cx{\trypaperwidth@cx}};}

\def\drawpaperwidthevendim{%
    \coordinate (A) at (0+\lefttrim+\trytrimedge@cx,\tol);
    \coordinate (B) at (\trystockwidth@cx,\tol);
    \coordinate (C) at (0.5\trystockwidth@cx,\tol);
    \draw[dim, |<->|] (A) -- (B);
   \node at (C) [yshift=0.5\baselineskip)]{paper width = \convert@cx{\trypaperwidth@cx}};
}

	% first we draw stockwidth and stockheight
	\draw [color=thegreen,fill=thegreen!30] (0,0) rectangle ++(\trystockwidth@cx,\trystockheight@cx);

	% draw the paper if trims are defined and no book size given
        % the paper width is then defined by the dashed blue line
	\ifoddpage
            \draw [book trim]  (0+\lefttrim,\trystockheight@cx-\trimtop@cx) 
                rectangle ++(\trystockwidth@cx-\lefttrim-\trytrimedge@cx,
                                   -\trystockheight@cx+\trimtop@cx+\bottomtrim);
               \drawpaperwidthdim
	\else
             \draw [book trim]  (0+\lefttrim+\trytrimedge@cx,\trystockheight@cx-\trimtop@cx)
                rectangle ++(\trystockwidth@cx-\lefttrim-\trytrimedge@cx,
                              -\trystockheight@cx+\trimtop@cx+\bottomtrim);
               \drawpaperwidthevendim
	\fi

\pgfmathsetmacro{\gridx}{12}
% draw grid
\ifoddpage
\draw[xstep=(\trypaperwidth@cx)/\gridx, ystep=\trypaperheight@cx/\gridx,color=thegreen!50,line width=0.4pt,yshift=\bottomtrim]  (0,0) grid ++(\trypaperwidth@cx,\trypaperheight@cx);
\else
\draw[xstep=(\trypaperwidth@cx)/\gridx, ystep=\trypaperheight@cx/\gridx,color=thegreen,line width=0.4pt,yshift=\bottomtrim,xshift=\trytrimedge@cx]  (0,0) grid ++(\trypaperwidth@cx,\trypaperheight@cx);
\fi

 
% stockwidth dimension lines
\edef\tol{-5\baselineskip}
\coordinate (BD) at (0,\tol);
\coordinate (BD2) at (\stockwidth,-5\baselineskip);
\draw[dim, |<->|] (BD) -- (BD2);
\draw (BD) ++ (0.5\stockwidth,0) node [yshift=0.5\baselineskip]{stockwidth=\convert@cx{\stockwidth}} ;

% top dimension at left
\coordinate (H1) at (-5mm,\trystockheight@cx-\trimtop@cx);
\coordinate (H2) at (-5mm,\trystockheight@cx-1in-\trytopmargin@cx-\tryheadsep@cx-\tryheadheight@cx);
\draw [dim,|<->|] (H1) -- (H2);
\node[left,text width=1.5cm, text ragged left,color=DarkGreen] at (-5mm,\trystockheight@cx-0.5*\margintop){top\\ \convert@cx{\the\margintop}};


% bottom dimension at left
\coordinate (H3) at (-5mm,0+\bottomtrim);
\coordinate (H4) at (-5mm,\trymarginbottom@cx);
\draw [dim,|<->|] (H3) -- (H4);
\node[left,text width=1.5cm,text ragged left] at (-5mm,0.5*\trymarginbottom@cx){bottom\\ \convert@cx{ \the\trymarginbottom@cx}};

% textheight at left
\draw[dim,<->]  (-5mm, \trymarginbottom@cx) -- ++ (0,\trytextheight@cx);
\node[left,text width=1.5cm,text ragged left] at (-5mm,\trymarginbottom@cx+0.5\trytextheight@cx){textheight \convert@cx{\trytextheight@cx}};

% dimension for book height
%
%\draw [dim,|<->|] (-4.5cm,\bottomtrim) --  (-4.5cm,0.5\trystockheight@cx-0.5\trimtop@cx) node[left,text width=1.5cm,text ragged left] {book height\\ \convert@cx{\trypaperheight@cx}} -- (-4.5cm,\trystockheight@cx-0.5\trimtop@cx) ;


% trimedge
\ifoddpage
  \coordinate (D) at (\trystockwidth@cx-4\trytrimedge@cx, 0.10\trytextheight@cx);
  \coordinate (E) at (\trystockwidth@cx,0.10\trytextheight@cx);
  \draw [dim,->|] (D) -- ++(3\trytrimedge@cx,0);
  \draw [dim,|<-|] (E) -- ++(3\trytrimedge@cx,0) node at ++(0,0) [right,text width=2cm,color=black] {trim edge    \convert@cx{\the\trytrimedge@cx}};
\else
  \coordinate (D1) at (0, \trystockheight@cx+ 5mm);
  \coordinate (E1) at ++ (\trytrimedge@cx,\stockheight+\trimtop@cx);
  \draw (D1) -- ++ (0, 10mm)  ++(\trytrimedge@cx,0) -- ++(0,-10mm) ;
\fi


% toptrim
%\ifdim\trimtop>0pt
  \coordinate (F) at (0.9\trystockwidth@cx, \trystockheight@cx-\trimtop@cx-8mm);
  \coordinate (G) at (0.9\trystockwidth@cx, \trystockheight@cx-\trimtop@cx);
  \coordinate (H) at (0.9\trystockwidth@cx,\trystockheight@cx);
  \draw (F)[dim,->|] -- (G);
  \draw (H) -- ++ (0,8mm) -- ++ (5mm,0)[|<-|,>=latex]
          node [right] at ++ (0,0) {top trim =  \convert@cx{\the\trimtop@cx}};
%\fi

% 1in offsets
\ifoddpage
   \draw[dashed,color=olive] (1in,0) -- (1in,\trystockheight@cx);
   \draw[dashed,color=olive] (0in,\trystockheight@cx-1in)-- ++ (\trystockwidth@cx,0);
\else
    \draw[dashed,color=olive] (0in,\trystockheight@cx-1in)-- ++ (\trystockwidth@cx,0);
    \draw[dashed,color=olive] (\trystockwidth@cx-1in,\trystockheight@cx)-- ++ (0,-\trystockheight@cx);
\fi

% oddsidemargin/evensidemargin
% draw dimension and name based on even or odd page
\ifoddpage
\draw[dim,|<->|] (0,0.1\trytextheight@cx) -- ++(1in+\innermargin+\trytrimedge@cx,0) node[right] at ++ (2ex,0) [text width=2cm] {\innermarginname\  \convert@cx{\the\innermargin}};
\else
\draw[dim,|<->|] (\trystockwidth@cx,0.1\trytextheight@cx) -- ++(-1in-\innermargin,0) node[right] at ++ (2ex,0) [text width=2cm] {\innermarginname\  \convert@cx{\the\innermargin}};
\fi

% HEADER
\coordinate (I) at (1in-\lefttrim+\innermargin,\trystockheight@cx-1in-\tryheadheight@cx-\trytopmargin@cx+\trimtop@cx);
\draw[fill=thegray!50] (I) rectangle ++ (\trytextwidth@cx,\tryheadheight@cx);


% add in inch
\draw [dim,|-|] (\trystockwidth@cx+3ex,\trystockheight@cx)
      -- ++(0,-1in) node [right] at ++(2ex,0.65in) {offset=\convert@cx{1in}};
%
%   add topmargin dimension
\ifdim\trytopmargin@cx>0pt
\draw [dim,|-] (\trystockwidth@cx+3ex,\trystockheight@cx-1in+\trimtop@cx)
      -- ++(0,-\trytopmargin@cx) node [right] at ++(2ex,0.5\trytopmargin@cx) {topmargin=\convert@cx{\trytopmargin@cx}};
\else
   \ifdim\trytopmargin@cx<0pt
   \draw [dim,|-] (\trystockwidth@cx+3ex,\trystockheight@cx-1in+\trimtop@cx)
      -- ++(0,-\trytopmargin@cx) node [right] at ++(2ex,0.5\trytopmargin@cx)  {topmargin=\convert@cx{\trytopmargin@cx}};
    \fi
\fi


%  add headheight dimension
\draw [dim,|-|] (\trystockwidth@cx+3ex,\trystockheight@cx-1in+\trimtop@cx-\trytopmargin@cx)
        -- ++(0,-\tryheadheight@cx) node [right] at ++(2ex,0.5\tryheadheight@cx) {headheight=\convert@cx{\the\tryheadheight@cx}};

%   add headsep dimension
\draw [dim,|-] (\trystockwidth@cx+3ex,\trystockheight@cx-1in+\trimtop-\tryheadsep@cx-\tryheadheight@cx-\trytopmargin@cx)
          -- ++(0,\tryheadsep@cx) node [below right] at ++(2ex,0){headsep = \convert@cx{\the\tryheadsep@cx}};

% footskip dimension
\draw [dim,|-|] (\trystockwidth@cx+3ex,\stockheight-1in+\trimtop@cx-\tryheadsep@cx-\tryheadheight@cx-\trytopmargin@cx-\trytextheight@cx) -- ++(0,-\tryfootskip@cx) node [right] at ++(2ex,0.5\tryfootskip@cx){footskip=\convert@cx{\the\tryfootskip@cx}};


% textarea
\coordinate (J) at (1in-\lefttrim+\innermargin,\trystockheight@cx-1in+\trimtop@cx-\tryheadheight@cx-\trytopmargin@cx-\tryheadsep@cx-\trytextheight@cx);
\draw[fill=thegray!50] (J) rectangle ++ (\trytextwidth@cx,\trytextheight@cx);

\draw[dim,<->|] (1in-\lefttrim+\innermargin,0.75\trytextheight@cx) -- ++(\trytextwidth@cx, 0)  node at ++(-0.5\trytextwidth@cx,0.5\baselineskip) {textwidth} node at ++ (-0.5\trytextwidth@cx,-\baselineskip) {\convert@cx{\the\trytextwidth@cx}};
%

%   add textheight dimension
\draw [dim,-] (\trystockwidth@cx+3ex,\trystockheight@cx-1in+\trimtop@cx-\tryheadsep@cx-\tryheadheight@cx-\trytopmargin@cx) -- ++(0,-\trytextheight@cx) node [right] at ++(2ex,0.5\trytextheight@cx){textheight=\convert@cx{\the\trytextheight@cx}};

% footer
\coordinate (I) at (1in-\lefttrim+\innermargin,  \trystockheight@cx-1in+\trimtop@cx-\tryheadheight@cx-\trytopmargin@cx-\tryheadsep@cx-\trytextheight@cx-\tryfootskip@cx);
\draw[fill=thegray!50] (I) rectangle ++ (\trytextwidth@cx,\tryheadheight@cx);


% marginpar
\def\leftmarginpar{%
    \draw [fill=thegray!50] (1in+\innermargin+\trytextwidth@cx+\marginparsep,   \stockheight-1in+\trimtop@cx-\trytopmargin@cx-\tryheadsep@cx-\tryheadheight@cx ) rectangle ++(\marginparwidth,-\trytextheight@cx);
 \draw [dim,|<->|] (1in-\lefttrim+\trytextwidth@cx+\innermargin+\marginparsep+\marginparwidth,0.75\trytextheight@cx) -- ++ (-\marginparwidth,0) node at ++(0.5\marginparwidth,0.5\baselineskip) {marginpar} node at ++(0.5\marginparwidth,-\baselineskip){\convert@cx{\the\marginparwidth}};
}
%
\def\rightmarginpar{%
 \draw [fill=thegray!50] (1in+\innermargin-\marginparsep,\stockheight-1in+\trimtop@cx-\trytopmargin@cx-\tryheadsep@cx-\tryheadheight@cx ) rectangle ++(-\marginparwidth,-\trytextheight@cx);
     \draw [dim,|<->|] (1in-\lefttrim+\innermargin-\marginparsep-\marginparwidth,0.75\trytextheight@cx) -- ++ (\marginparwidth,0) node at ++(-0.5\marginparwidth,0.5\baselineskip) {marginpar} node at ++(-0.5\marginparwidth,-\baselineskip){\convert@cx{\the\marginparwidth}};
}

\ifdrawmarginpars
  \checkoddpage
  \alignedge
    \if@twoside
         \ifoddpage
            \leftmarginpar
         \else
            \rightmarginpar
        \fi
   \else
  % one side paper
        \leftmarginpar
    \fi
\fi

% draw diagonal
\ifoddpage
     \draw [color=blue]  (\paperwidth-\trytrimedge@cx,0) -- (0, \stockheight-\trimtop@cx);
  \else
    \draw [color=blue] (\trytrimedge@cx,0) -- (\paperwidth,\paperheight-\trimtop@cx);
\fi
\end{tikzpicture}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 SPREAD DRAWN AS PER CLASSICAL RULES
%                 FOR ILLUSTRATION PURPOSE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newlength\paperwidth@cx
\newlength\paperheight@cx
\setlength\paperwidth@cx{\paperwidth}
\setlength\paperheight@cx{\paperheight}
\setlength\bindingcorrection{0.25in}

\pgfmathsetmacro\xsteps{20}
\pgfmathsetmacro\ysteps{20}

\def\drawclassicspread{%
   \begin{tikzpicture}[scale=0.4,inner sep=0pt,outer sep=0pt]
   % draw the two pages
    \draw[xstep=(\paperwidth@cx)/\xsteps, ystep=(\paperheight@cx)/\ysteps,color=gray]  (0,0) grid (\paperwidth@cx,   \paperheight@cx);
   \draw[color=black] (0,0) rectangle (\paperwidth@cx,\paperheight@cx);

\begin{scope}[xshift=\paperwidth@cx+\bindingcorrection]
  \draw[xstep=(\paperwidth@cx)/\xsteps, ystep=(\paperheight@cx)/\ysteps,color=gray]  ++(0,0) grid (\paperwidth@cx,   \paperheight@cx);
   \draw[color=black] (0,0) rectangle (\paperwidth@cx,\paperheight@cx);
\end{scope}

%draw the binding correction
\draw[fill=gray, draw] (\paperwidth@cx,0)  rectangle ++(\bindingcorrection,\paperheight@cx);


% add type areas
%
\draw[fill=thegray] (2\paperwidth@cx/\xsteps,
                             2\paperheight@cx/\ysteps) rectangle  
                         ++(\paperwidth@cx-3\paperwidth@cx/\xsteps,
                            \paperheight@cx-3\paperheight@cx/\ysteps);

\draw[fill=thegray,xshift=\paperwidth@cx+\bindingcorrection] (1\paperwidth@cx/\xsteps,
                             2\paperheight@cx/\ysteps) rectangle  
                         ++(\paperwidth@cx-3\paperwidth@cx/\xsteps,
                            \paperheight@cx-3\paperheight@cx/\ysteps);


%
\draw[color=white,font={\sffamily\bfseries}] node at (\paperwidth@cx+0.5\bindingcorrection, 0.5\paperheight@cx)[rotate=90,inner sep=0pt,outer sep=0pt] {BINDING CORRECTION};

\node [color=white,font={\sffamily\bfseries}] at (0.5\paperwidth@cx,0.5\paperheight@cx)  {LEFT PAGE};
\node [color=white,font={\sffamily\bfseries}] at (1.5\paperwidth@cx+\bindingcorrection,0.5\paperheight@cx){RIGHT PAGE};

% draw diagonals

\draw [color=spot, line width=1pt] (0,0)-- (\paperwidth@cx,\paperheight@cx);
\draw [color=spot, line width=1pt] (2\paperwidth@cx+\bindingcorrection,0)-- ++(-\paperwidth@cx,\paperheight@cx);



\draw [color=spot, line width=1pt] (0,0)-- (2\paperwidth@cx+\bindingcorrection,\paperheight@cx);
\draw [color=spot, line width=1pt]  (2\paperwidth@cx+\bindingcorrection,0) -- (0,\paperheight@cx);

% draw Van de Graaf lines

\draw [color=red, line width=1pt] (\paperwidth@cx-3*\paperwidth@cx/\xsteps, \paperheight@cx) -- ++ (0,-3\paperheight@cx/\ysteps);

\draw [color=red, line width=1pt] (\paperwidth@cx+3*\paperwidth@cx/\xsteps+\bindingcorrection, \paperheight@cx) -- ++ (0,-3\paperheight@cx/\ysteps) -- ++(-6*\paperwidth@cx/\xsteps-\bindingcorrection, 3*\paperheight@cx/\ysteps) ++ (0, -3*\paperheight@cx/\ysteps) -- ++ (6*\paperwidth@cx/\xsteps+\bindingcorrection, 3*\paperheight@cx/\ysteps);


% draw circles
% The circle center x is at the middle of the pagewidth.
% The y dimension is at pageheight-3y steps/2

\pgfmathsetlength{\@tempdima}{(2\paperheight@cx/\ysteps) + (\paperheight@cx-3*\paperheight@cx/\ysteps)/2}

\draw [color=orange,line width=1pt] (0.5\paperwidth@cx, \@tempdima) circle (0.5\paperwidth@cx);

\end{tikzpicture}
}


%% This is a sidenote without the footnote mark
%\newcommand\marginnote[2][0pt]{%
% % \let\cite\@tufte@infootnote@cite%   use the in-sidenote \cite command
%  %\gdef\@tufte@citations{}%           clear out any old citations
%  \@tufte@margin@par%                 use parindent and parskip settings for marginal text
%  \marginpar{\hbox{}\vspace*{#1}\marginparfont@cx\marginparjustification@cx\vspace*{-1\baselineskip}\noindent #2}%
%  \@tufte@reset@par%                  use parindent and parskip settings for body text
%  %\@tufte@print@citations%            print any citations
%  %\let\cite\@tufte@normal@cite%       go back to using normal in-text \cite command
%}
